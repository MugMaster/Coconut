package code.body;

import code.utilities.Printer;
import code.utilities.FileManager;
import code.utilities.Format;
import code.utilities.Lockdown;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import static java.awt.Font.PLAIN;
import java.awt.FontFormatException;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author t.macdonald
 */
public class NoCoconutForm extends javax.swing.JFrame {

    /**
     * Creates new form NoCoconutForm
     */
    public NoCoconutForm() {
        initComponents();
        start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        timerLbl = new javax.swing.JLabel();
        coconutMonologlbl = new javax.swing.JLabel();
        generateCoconutBtn = new javax.swing.JButton();
        passwardFieldJtf = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(0, 0, 0));
        setUndecorated(true);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        timerLbl.setBackground(new java.awt.Color(0, 0, 0));
        timerLbl.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        timerLbl.setForeground(new java.awt.Color(255, 0, 0));
        timerLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timerLbl.setText("2:00");
        timerLbl.setToolTipText("Time is ticking...");
        timerLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        coconutMonologlbl.setForeground(new java.awt.Color(255, 255, 255));
        coconutMonologlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        coconutMonologlbl.setText("jLabel1");
        coconutMonologlbl.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        generateCoconutBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/images/coconut.png"))); // NOI18N
        generateCoconutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateCoconutBtnActionPerformed(evt);
            }
        });

        passwardFieldJtf.setBackground(new java.awt.Color(0, 0, 0));
        passwardFieldJtf.setForeground(new java.awt.Color(255, 255, 255));
        passwardFieldJtf.setBorder(null);
        passwardFieldJtf.setCaretColor(new java.awt.Color(0, 0, 0));
        passwardFieldJtf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwardFieldJtfActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(passwardFieldJtf, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(coconutMonologlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 851, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addComponent(timerLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(generateCoconutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passwardFieldJtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(coconutMonologlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(generateCoconutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(42, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(timerLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateCoconutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateCoconutBtnActionPerformed
        // TODO add your handling code here:
        Start.generateCoconut();
        Start.noCoconutForm = null;
        this.dispose();
    }//GEN-LAST:event_generateCoconutBtnActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyPressed

    private void passwardFieldJtfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwardFieldJtfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwardFieldJtfActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NoCoconutForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NoCoconutForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NoCoconutForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NoCoconutForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NoCoconutForm().setVisible(true);
            }
        });
    }

    public int netWidth;
    public int netHeight;

    public final int TWO_MINUETS = 120;
    public int timeLeft;

    private void start() {
        Printer.printBuff("Started Building Form");
        timeLeft = TWO_MINUETS;

        setFonts();
        setText();

        this.setLayout(null);

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        netWidth = (int) screenSize.getWidth();
        netHeight = (int) screenSize.getHeight();
        this.setSize(netWidth, netHeight);

        setPositions();

        getContentPane().setBackground(new java.awt.Color(0, 0, 0));

        this.setVisible(true);
        
        Printer.print("Finnished Building Form");
    }

    public void tick() {
        boolean password = Lockdown.checkPassword(passwardFieldJtf.getText());
        if (password) Lockdown.end();
        
        if (timeLeft != 0) timeLeft--;
        else timeOut();

        displayTime(timerLbl, timeLeft);

        if (timerLbl.isVisible()) timerLbl.setVisible(false);
        
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(NoCoconutForm.class.getName())
                    .log(Level.SEVERE, null, ex);
        }
        timerLbl.setVisible(true);
    }

    /**
     * calls when timer is out
     */
    private void timeOut() {
        Printer.printBuff("out of time!!");
        Lockdown.powerOff();
    }

    /**
     * Makes the Inscription font from a font file
     *
     * @param size the size of the font
     * @return the font made
     */
    public Font generateUniqueFont(float size) {
        Printer.print("Generating new font");

        Font newFont = new Font("", PLAIN, 40);

        try {
            File fontFile = FileManager.getReasorseFile(
                    "media\\text\\fonts\\alarmClock.ttf",
                    "\\alarmClock.ttf", true);
            System.out.println("fontFile: " + fontFile.getName());
            newFont = Font.createFont(Font.TRUETYPE_FONT,
                    fontFile).deriveFont(size);
            GraphicsEnvironment ge
                    = GraphicsEnvironment.getLocalGraphicsEnvironment();

            //register the font
            ge.registerFont(newFont);

        } catch (IOException e) {
            e.printStackTrace();
        } catch (FontFormatException e) {
            e.printStackTrace();
        }

        return newFont;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel coconutMonologlbl;
    private javax.swing.JButton generateCoconutBtn;
    private javax.swing.JTextField passwardFieldJtf;
    private javax.swing.JLabel timerLbl;
    // End of variables declaration//GEN-END:variables

    private final boolean HORIZONTAL = true;
    private final boolean VERTICAL = false;

    private void setFonts() {
        Font fontT = generateUniqueFont(50f);
        Font fontM = generateUniqueFont(20f);
        timerLbl.setFont(fontT);
        coconutMonologlbl.setFont(fontM);
    }

    private void setText() {
        final String coconutMonolog
                = "<html> Woops, looks like you lost your "
                + "pet coconut! Don`t worry we can help!"
                + "<br/> I`ll give you about two minuets "
                + "to repair this discrepancy, after that"
                + "<br/> we may move to more extreme measures"
                + " to ensure your coconut is cared for."
                + "<br/> If you require a new coconut please "
                + "press the button at the bottom of the screen<html>";

        coconutMonologlbl.setText(coconutMonolog);
    }
 
    private void setPositions() {
        coconutMonologlbl.setBounds(0, coconutMonologlbl.getY(), netWidth,
                coconutMonologlbl.getHeight());
        centerComp(timerLbl, HORIZONTAL);
        centerComp(timerLbl, VERTICAL);
        centerComp(coconutMonologlbl, HORIZONTAL);
        final int btnBuffer = 20;
        generateCoconutBtn.setBounds(
                netWidth - btnBuffer - generateCoconutBtn.getWidth(),
                netHeight - btnBuffer - generateCoconutBtn.getHeight(),
                generateCoconutBtn.getWidth(), generateCoconutBtn.getHeight());
    }

    private void centerComp(JLabel comp, boolean direction) {
        int width = comp.getWidth();
        int height = comp.getHeight();
        int x = comp.getX();
        int y = comp.getY();

        if (direction == HORIZONTAL) {
            x = (int) (netWidth / 2) - (width / 2);
        } else {
            y = (int) (netHeight / 2) - (height / 2);
        }

        comp.setBounds(x, y, width, height);
    }

    /**
     * Displays a time value on a JLabel
     * 
     * @param comp the JLabel to display on
     * @param time 
     */
    private void displayTime(JLabel comp, long time) {
        String msg = Format.time(time);
        comp.setText(msg);
    }
    
    /**
     * Saves time left to perm
     */
    private void saveTime() {
        final int TIME_LINE = 1;
        
    }
    
}
